Framework -
    It gives us organized structure
    Proper folder hierarchy
    Single execution point
    Separate place for different code


We use maven as build management tool

groupID - company name
artifactID - project name

main folder - for development code
test folder - for testing code
            - Java - For coding part
            - Resources - for non-coding part

pom.xml - to add dependency
    It is a configuration file which is considered as a backbone of the maven project

Cucumber - It supports behavioral driven development approach wherein we write our test cases specification in
           gherkin language (plain language)

           Keywords: features, background, scenario

           Given - Precondition - Given user is navigated to the HRMS application
           When - Actions - When the user enters username and password
           And - This tage can come with every other keyword - And click on login button
           Then - Expected output - result - Then user should be able to see dashboard page
           Feature  - .feature - to write scenario we use feature file
           scenario -- User story 12345 - Admin should be able to search an employee in HRMS application

Acceptance criteria:
    1) Search by ID
    2) Search by name


1.
Given user opens browser and navigated to HRMS
And user is logged in as an admin
And user is on Employee List page
When user enters valid employee ID
And  user clicks on search button
Then user see employee in the employee table

2.
Given user opens browser and navigated to HRMS
And user is logged in as an admin
And user is on Employee List page
When user enters firstname and lastname
And  user clicks on search button
Then user see employee in the employee table


cucumber -
excel -


Class 3

Recap:
Why do we use cucumber?
    To increase transparency / to reduce communication gap
    supports BDD Behavior Driven development (Gherkin) language - easy to understand for non-technical people also focuses on end user

Feature File:
    This is the place where you write the scenarios

Step definition - to implement the code for the steps written in feature file, we use step definitions

Runner class

Background: it is applicable only for one feature file, here we add common steps among all the scenarios

Class 4

Hooks - We use hooks to provide preconditions and post conditions in cucumber
        We should provide hooks under the package where my steps are available


Execution order when running:
    1-Hooks
        2-Background
        3-Scenario
    4-Hooks


Hooks vs Background

Background - it is applicable to one feature file
Hooks - It is applicable to all the feature files


Class 5

Passing the data
Passing the data directly from feature file - Scenario
Passing the data from @Example table from scenario outline to achieve ddt
Passing the data from data tables


Data tables vs examples
Data table is applicable to just a single step
Example table is applicable to complete scenario

Class 6

This Framework supports BDD and DDT (Data Driven Test).

POM: Page Object Model

POM allows us to create classes according to the pages available in the application

Class 7

implicit wait based on time, explicit wait based on condition

Class 8

Recap -
Using POM to write functions in respective classes

Use common methods to write common functions in it, such as:
sendText
click


open the terminal in the project

mvn clean
mvn test
mvn clean test (doing them together)
mvn test -Dcucumber.filter.tags=“@tagName”          This is used to execute a specific tag name


Review 2:

Feature File: we write scenario is feature file

Feature: The name of the feature file / User Story
Scenario: The name of the test case
Given: Precondition
When: Perform some action
And: Supporting keyword
Then: Results
Scenario Outline: To pass the data from example table, we use scenario outline instead of scenario
Examples: It is a table where we provide data in key and value format
Background: All the initial common steps across all the scenarios in the feature file will be written here
Hooks(before and after) - pre and post condition throughout our production



Steps Class: all the step definition for the feature file will be written here
Runner Class:

------------


Java Rest Assured API: This is a Java Library used to automate Rest API

Rest service allows data to be sent in JSON object
JSON object consists of key and value pairs

Rest Assured is DSL(Domain Specific Language)
This is a java based Library we use to automate Rest Api's .

Rest Assured follows behavioral driven development (BDD) approach.

Given - preparing the request
When - making the request/making the call/hitting the endpoint
Then - response - Assertion/Verification

To write sample test - get one employee - we need:
    Base uri - url
    end point
    headers - token, content type
    query parameter


Class 2 API

Recap
sample test - getting an employee details using api

Base URI - base URL
headers - content type & authorization
query parameter

When - keyboard we use to hit the end point

Then - for verification and validation

@Test - junit

Hamcrest Matchers-
    Class contains methods to perform assertions

JasonPath vs jsonPath()

JsonPath is class
jsonPath() is a method that belongs to JsonPath class